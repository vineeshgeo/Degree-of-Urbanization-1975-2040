# -*- coding: utf-8 -*-
"""degree of urban kerala.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tkIIiEFdl6HFltnRL9d6vsvtTIwagmbq
"""

# Install dependencies in Colab
!pip install geemap

import ee
import geemap

# ---------------------------
# AOI and Map
# ---------------------------
geometry = ee.Geometry.Polygon(
    [[[74.01054042134886, 13.629588049855682],
      [74.01054042134886, 8.151289476914771],
      [78.38309901509886, 8.151289476914771],
      [78.38309901509886, 13.629588049855682]]], None, False
)

Map = geemap.Map(center=[10.9, 76.2], zoom=7)

# ---------------------------
# Class info & palette
# ---------------------------
classCodes = [30, 23, 22, 21, 13, 12, 11]
classNames = {
    30: 'Urban Centre',
    23: 'Dense Urban Cluster',
    22: 'Semi-Dense Urban Cluster',
    21: 'Suburban / Peri-Urban',
    13: 'Rural Cluster',
    12: 'Low-Density Rural',
    11: 'Very Low-Density Rural'
}
smodPalette = [
    'D73027', # 30
    'FC8D59', # 23
    'FEE08B', # 22
    'D9EF8B', # 21
    '91CF60', # 13
    '1A9850', # 12
    '006837'  # 11
]

# ---------------------------
# Years and load images
# ---------------------------
years = [1975, 1990, 2000, 2015, 2020]

images = [ee.Image(f'JRC/GHSL/P2023A/GHS_SMOD_V2-0/{y}')
            .select('smod_code')
            .clip(geometry)
            .rename(f'y{y}') for y in years]

smodStack = ee.Image.cat(images)

# ---------------------------
# Projection function
# ---------------------------
targetYear = 2040

def projectClass(classCode):
    coll = ee.ImageCollection([
        ee.Image.constant(y).rename('year').toFloat()
          .addBands(smodStack.select(f'y{y}').eq(classCode).rename('presence').toFloat())
        for y in years
    ])

    linfit = coll.reduce(ee.Reducer.linearFit().unweighted())
    slope = linfit.select('scale')
    offset = linfit.select('offset')

    pred = slope.multiply(targetYear).add(offset).rename(f'predicted_{classCode}')
    predClamped = pred.max(0).min(1)
    return predClamped.toFloat()

predictedList = [projectClass(c) for c in classCodes]
predictedStack = ee.Image.cat(predictedList)
predictedStack = predictedStack.rename([f'p{c}' for c in classCodes])

predictedMax = predictedStack.reduce(ee.Reducer.max()).rename('pred_max')

predicted2040_code = ee.Image(0).clip(geometry).toFloat()
for code in classCodes:
    bandName = f'p{code}'
    mask = predictedStack.select(bandName).eq(predictedMax)
    contrib = mask.multiply(code)
    predicted2040_code = predicted2040_code.add(contrib)

anyValid = predictedStack.reduce(ee.Reducer.sum()).neq(0)
predicted2040 = predicted2040_code.toInt().rename('SMOD_2040').updateMask(anyValid)

# ---------------------------
# Visualization in Colab
# ---------------------------
vis_params = {'min': 11, 'max': 30, 'palette': smodPalette}

for y in years:
    Map.addLayer(smodStack.select(f'y{y}'), vis_params, f'SMOD {y}')

Map.addLayer(predicted2040, vis_params, 'Predicted SMOD 2040 (linear)')

# ---------------------------
# Export to Google Drive
# ---------------------------
task = ee.batch.Export.image.toDrive(
    image=predicted2040,
    description='SMOD_2040_predicted_linear',
    folder='GHS_SMOD_GeoTIFF',
    fileNamePrefix='smod_2040_predicted_linear',
    region=geometry,
    scale=100,
    maxPixels=1e13
)
task.start()

Map