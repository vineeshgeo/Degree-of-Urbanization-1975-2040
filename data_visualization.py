# -*- coding: utf-8 -*-
"""Data Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FQL-GLvigpJ-Dldb8_gVavsX9wzSh9Vk
"""

# Commented out IPython magic to ensure Python compatibility.
# ðŸ“Š Land Use Analysis in Google Colab

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Ensure plots display within notebook
# %matplotlib inline

# ---------------------------------------
# ðŸ”¹ 1. Input Data: Area in Sqkm
# ---------------------------------------

area_data = {
    "Year": [1975, 1990, 2000, 2015, 2020, 2040],
    "Water": [234.388, 216.81, 211.355, 205.041, 200.563, 200.22],
    "Very_Low_Density_Rural": [15665.6, 14906.3, 14581.1, 11676.8, 11029.8, 11196.3],
    "Low_Density_Rural": [9660.86, 8718.02, 8031.43, 8570.14, 7152.21, 7271.06],
    "Rural_Cluster": [698.282, 694.561, 608.792, 495.469, 344.533, 372.728],
    "Suburban_Peri_Urban": [9474.24, 9750.71, 10047.3, 11474.6, 12697.9, 12473.2],
    "Semi_Dense_Urban_Cluster": [783.109, 643.187, 649.75, 652.986, 832.31, 863.533],
    "Dense_Urban_Cluster": [821.233, 844.305, 858.48, 1000.01, 920.002, 965.892],
    "Urban_Centre": [1518.53, 3084.21, 3871.83, 4785.06, 5659.32, 5517.22]
}

df_area = pd.DataFrame(area_data)

# ---------------------------------------
# ðŸ”¹ 2. Input Data: % of Total Area
# ---------------------------------------

percent_data = {
    "Year": [1975, 1990, 2000, 2015, 2020, 2040],
    "Water": [0.605, 0.558, 0.544, 0.528, 0.516, 0.517],
    "Very_Low_Density_Rural": [40.43, 38.37, 37.52, 30.04, 28.4, 28.89],
    "Low_Density_Rural": [24.94, 22.44, 20.67, 22.05, 18.41, 18.76],
    "Rural_Cluster": [1.5, 1.79, 1.57, 1.28, 0.89, 0.961],
    "Suburban_Peri_Urban": [24.46, 25.1, 25.85, 29.53, 32.69, 32.18],
    "Semi_Dense_Urban_Cluster": [2.02, 1.65, 1.67, 1.68, 2.14, 2.23],
    "Dense_Urban_Cluster": [2.12, 2.17, 2.21, 2.57, 2.37, 2.49],
    "Urban_Centre": [3.92, 7.94, 9.96, 12.31, 14.57, 14.23]
}

df_percent = pd.DataFrame(percent_data)

# ---------------------------------------
# ðŸ”¹ 3. Input Data: % Change Over Periods
# ---------------------------------------

percent_change_data = {
    "Class": [
        "Water", "Very_Low_Density_Rural", "Low_Density_Rural", "Rural_Cluster",
        "Suburban_Peri_Urban", "Semi_Dense_Urban_Cluster", "Dense_Urban_Cluster", "Urban_Centre"
    ],
    "1975â€“1990": [-0.047, -2.06, -2.5, 0.29, 0.64, -0.37, 0.05, 4.02],
    "1990â€“2000": [-0.014, -0.85, -1.77, -0.22, 0.75, 0.02, 0.04, 2.02],
    "2000â€“2015": [-0.016, -7.48, 1.38, -0.29, 3.68, 0.01, 0.36, 2.35],
    "2015â€“2020": [-0.012, -1.64, -3.64, -0.39, 3.16, 0.46, -0.2, 2.26],
    "1975â€“2020": [-0.089, -12.03, -6.53, -0.61, 8.23, 0.12, 0.25, 10.65],
    "1975â€“2040": [-0.088, -11.54, -6.18, -0.539, 7.72, 0.21, 0.37, 10.31]
}
df_percent_change = pd.DataFrame(percent_change_data)

# ---------------------------------------
# ðŸ”¹ 4. Input Data: Sqkm Change Over Periods
# ---------------------------------------

sqkm_change_data = {
    "Class": [
        "Water", "Very_Low_Density_Rural", "Low_Density_Rural", "Rural_Cluster",
        "Suburban_Peri_Urban", "Semi_Dense_Urban_Cluster", "Dense_Urban_Cluster", "Urban_Centre"
    ],
    "1975â€“1990": [-17.578, -759.3, -942.84, 112.279, 276.47, -139.922, 23.072, 1565.68],
    "1990â€“2000": [-5.455, -325.2, -686.59, -85.769, 296.59, 6.563, 14.175, 787.62],
    "2000â€“2015": [-6.314, -2904.3, 538.71, -113.323, 1427.3, 3.236, 141.53, 913.23],
    "2015â€“2020": [-4.478, -647, -1417.93, -150.936, 1323.3, 179.324, -79.99, 874.26],
    "1975â€“2020": [-33.825, -4635.8, -2508.65, -237.749, 2723.66, 49.201, 98.787, 4140.79],
    "1975â€“2040": [-34.168, -4469.3, -2389.8, -325.554, 2998.96, 80.424, 144.659, 3998.69]
}
df_sqkm_change = pd.DataFrame(sqkm_change_data)

# ---------------------------------------
# ðŸ“ˆ Visualization Functions
# ---------------------------------------

def plot_line(df, title, ylabel):
    df_melted = df.melt(id_vars=["Year"], var_name="Class", value_name=ylabel)
    plt.figure(figsize=(14, 6))
    sns.lineplot(data=df_melted, x="Year", y=ylabel, hue="Class", marker='o')
    plt.title(title)
    plt.ylabel(ylabel)
    plt.grid(True)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.show()

def plot_changes(df, title):
    df_melted = df.melt(id_vars=["Class"], var_name="Period", value_name="Change")
    plt.figure(figsize=(14, 6))
    sns.barplot(data=df_melted, x="Period", y="Change", hue="Class")
    plt.title(title)
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# ---------------------------------------
# ðŸ“Š Visualizations
# ---------------------------------------

# Area over time
plot_line(df_area, "Land Use Area Over Time (Sqkm)", "Area (Sqkm)")

# Percentage area over time
plot_line(df_percent, "Percentage Land Use Over Time", "% Area")

# Percentage change over periods
plot_changes(df_percent_change, "Percentage Change in Land Use Over Periods")

# Sqkm change over periods
plot_changes(df_sqkm_change, "Sqkm Change in Land Use Over Periods")

# ðŸ”š END

!pip install plotly --quiet

import plotly.express as px

# Melt area data
df_melted = df_area.melt(id_vars='Year', var_name='Class', value_name='Area')

fig = px.line(df_melted, x="Year", y="Area", color="Class", markers=True,
              title="Interactive Line Chart of Area by Class",
              labels={"Area": "Area (sqkm)"})

fig.update_layout(hovermode="x unified")
fig.show()

# Stacked Area Plot for % Area
df_percent_stacked = df_percent.set_index("Year")
plt.figure(figsize=(14, 7))
df_percent_stacked.plot(kind="area", stacked=True, cmap="tab20", alpha=0.85)
plt.title("Stacked Area Chart: Land Use Distribution (%) Over Years")
plt.ylabel("% of Total Area")
plt.xlabel("Year")
plt.legend(title="Class", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.tight_layout()
plt.show()

def dual_axis_plot(class_name):
    fig, ax1 = plt.subplots(figsize=(12, 6))

    ax2 = ax1.twinx()
    ax1.plot(df_area["Year"], df_area[class_name], 'g-', marker='o', label="Area (sqkm)")
    ax2.plot(df_percent["Year"], df_percent[class_name], 'b--', marker='x', label="% of total")

    ax1.set_xlabel("Year")
    ax1.set_ylabel("Area (sqkm)", color='g')
    ax2.set_ylabel("% of Total Area", color='b')

    plt.title(f'Dual Axis Plot: {class_name}')
    fig.tight_layout()
    plt.grid(True)
    plt.show()

# Try for Urban_Centre or any land class
dual_axis_plot("Urban_Centre")

from math import pi

def plot_radar(df, year_list):
    categories = df.columns[1:]
    N = len(categories)

    plt.figure(figsize=(8, 8))
    angles = [n / float(N) * 2 * pi for n in range(N)]
    angles += angles[:1]  # complete the circle

    for year in year_list:
        values = df[df["Year"] == year].iloc[0, 1:].tolist()
        values += values[:1]
        plt.polar(angles, values, label=str(year), linewidth=2)

    plt.xticks(angles[:-1], categories, color='grey')
    plt.title("Radar Chart: % Land Use Classes by Year", size=15)
    plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    plt.tight_layout()
    plt.show()

# Call the radar chart function
plot_radar(df_percent, [1975, 2000, 2020, 2040])

# Heatmap of % Change over periods
plt.figure(figsize=(12, 6))
heatmap_data = df_percent_change.set_index("Class")
sns.heatmap(heatmap_data, annot=True, cmap="coolwarm", center=0, fmt=".2f")
plt.title("Heatmap: % Change in Land Use Over Periods")
plt.tight_layout()
plt.show()